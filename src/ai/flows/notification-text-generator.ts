// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview A notification text generator AI agent.
 *
 * - generateNotificationText - A function that handles the notification text generation process.
 * - GenerateNotificationTextInput - The input type for the generateNotificationText function.
 * - GenerateNotificationTextOutput - The return type for the generateNotificationText function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateNotificationTextInputSchema = z.object({
  notificationType: z
    .string()
    .describe('The type of notification to generate (e.g., pickup scheduled, pickup completed, account created).'),
  additionalContext: z
    .string()
    .optional()
    .describe('Any additional context or information to include in the notification.'),
});
export type GenerateNotificationTextInput = z.infer<typeof GenerateNotificationTextInputSchema>;

const GenerateNotificationTextOutputSchema = z.object({
  notificationText: z.string().describe('The generated notification text.'),
});
export type GenerateNotificationTextOutput = z.infer<typeof GenerateNotificationTextOutputSchema>;

export async function generateNotificationText(input: GenerateNotificationTextInput): Promise<GenerateNotificationTextOutput> {
  return generateNotificationTextFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateNotificationTextPrompt',
  input: {schema: GenerateNotificationTextInputSchema},
  output: {schema: GenerateNotificationTextOutputSchema},
  prompt: `You are an expert notification text generator for a waste management system.

You will generate notification text based on the notification type and any additional context provided.

Notification Type: {{{notificationType}}}
Additional Context: {{{additionalContext}}}

Generated Notification Text:`,
});

const generateNotificationTextFlow = ai.defineFlow(
  {
    name: 'generateNotificationTextFlow',
    inputSchema: GenerateNotificationTextInputSchema,
    outputSchema: GenerateNotificationTextOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
